"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["74002"],{32464:function(e,t,n){n.r(t),n.d(t,{default:()=>m,frontMatter:()=>o,metadata:()=>s,assets:()=>l,toc:()=>d,contentTitle:()=>r});var s=JSON.parse('{"id":"build-in-call-ui/build-your-own/handling-states-and-configs","title":"Handling States and Configs","description":"Source Code//github.com/dyte-io/react-native-samples/tree/main/samples/createyourown_ui","source":"@site/docs/rn-ui-kit/build-in-call-ui/build-your-own/handling-states-and-configs.mdx","sourceDirName":"build-in-call-ui/build-your-own","slug":"/build-in-call-ui/build-your-own/handling-states-and-configs","permalink":"/flutterboilerplatedocs/react-native/build-in-call-ui/build-your-own/handling-states-and-configs","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Handling States and Configs","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"DyteMeeting","permalink":"/flutterboilerplatedocs/react-native/build-in-call-ui/default-meeting-ui"},"next":{"title":"States Based UI Split","permalink":"/flutterboilerplatedocs/react-native/build-in-call-ui/build-your-own/states based UI Split"}}'),i=n("85893"),a=n("50065");n("11258");let o={title:"Handling States and Configs",sidebar_position:1},r=void 0,l={},d=[];function c(e){let t={a:"a",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Source Code: ",(0,i.jsx)(t.a,{href:"https://github.com/dyte-io/react-native-samples/tree/main/samples/create_your_own_ui",children:"https://github.com/dyte-io/react-native-samples/tree/main/samples/create_your_own_ui"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"DyteMeeting"})," component does a lot more than just providing the user interface."]}),"\n",(0,i.jsx)(t.p,{children:"It does the following things internally."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Keeps a mapping of components and show them according to the preset's view_type such as group_call, webinar, and livestream."}),"\n",(0,i.jsx)(t.li,{children:"Provides background color, text colors and other such CSS properties."}),"\n",(0,i.jsx)(t.li,{children:"Maintains states of modals, sidebars between web-core & ui-kit"}),"\n",(0,i.jsx)(t.li,{children:"Shifts the control bar buttons to More menu if the screen size is small."}),"\n",(0,i.jsx)(t.li,{children:"Passes config, states, translation, icon packs to all child components."}),"\n",(0,i.jsx)(t.li,{children:"It is the target element that gets full screened on click of full screen toggle."}),"\n",(0,i.jsx)(t.li,{children:"Joins the meeting automatically if showSetupScreen is false."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Since we are splitting ",(0,i.jsx)(t.code,{children:"DyteMeeting"})," component in pieces, we need to do these ourselves now."]}),"\n","\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import React, {useEffect, useState} from 'react';\nimport {\n  DyteProvider,\n  useDyteClient,\n  useDyteMeeting,\n} from '@dytesdk/react-native-core';\nimport DyteClient from '@dytesdk/web-core';\nimport {\n  DyteUIProvider,\n  UIConfig,\n  defaultConfig,\n  generateConfig,\n} from '@dytesdk/react-native-ui-kit';\nimport {DyteThemePresetV1} from '@dytesdk/web-core';\nimport {DyteStateListenersUtils} from './dyte-state-listeners';\nimport {CustomStates} from './types';\nimport {store} from './utils/store';\nimport {Provider} from 'react-redux';\n\nfunction Meeting() {\n  const {meeting} = useDyteMeeting();\n  const [config, setConfig] = useState<UIConfig>(defaultConfig);\n  const [states, setStates] = useState<CustomStates>({\n    meeting: 'setup',\n    sidebar: 'chat',\n    activeMoreMenu: false,\n    activeLeaveConfirmation: false,\n    permissionGranted: true,\n    prefs: {\n      mirrorVideo: true,\n      muteNotificationSounds: false,\n      autoScroll: true,\n    },\n    designSystem: {\n      colors: {\n        brand: {\n          300: '#497CFD',\n          400: '#356EFD',\n          500: '#2160FD',\n          600: '#0D51FD',\n          700: '#2160FD',\n        },\n        background: {\n          1000: '#080808',\n          900: '#1A1A1A',\n          800: '#333333',\n          700: '#4C4C4C',\n          600: '#666666',\n        },\n        text: '#FFFFFF',\n        textOnBrand: '#FFFFFF',\n        videoBg: '#333333',\n        success: '#83D017',\n        danger: '#FF2D2D',\n        warning: '#FFCD07',\n      },\n    },\n  });\n\n  useEffect(() => {\n    async function setupMeetingConfigs() {\n      const theme = meeting!.self.config;\n      const generatedConfig = generateConfig(theme as DyteThemePresetV1, {});\n      const newConfig = generatedConfig.config;\n\n      setConfig({...newConfig});\n\n      const stateListenersUtils = new DyteStateListenersUtils(\n        () => meeting,\n        () => states,\n        () => setStates,\n      );\n      stateListenersUtils.addDyteEventListeners();\n    }\n\n      setupMeetingConfigs();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [meeting]);\n  return <CustomDyteMeetingUI meeting={meeting} config={config} states={states} setStates={setStates} />;\n}\n\nfunction CustomDyteMeetingUI({ meeting, config, states, setStates }: { meeting: DyteClient, config: UIConfig, states: CustomStates, setStates: SetStates}) {\n  return (\n    <View>\n      <DyteText>Your Custom UI will come here </DyteText>\n    </View>\n  );\n}\n\nclass DyteStateListenersUtils {\n  getStates: () => CustomStates;\n\n  getStateSetter: () => (newState: CustomStates) => void;\n\n  getMeeting: () => DyteClient;\n\n  get states() {\n    return this.getStates();\n  }\n\n  get setGlobalStates() {\n    return this.getStateSetter();\n  }\n\n  get meeting() {\n    return this.getMeeting();\n  }\n\n  constructor(\n    getMeeting: () => DyteClient,\n    getGlobalStates: () => CustomStates,\n    getGlobalStateSetter: () => (newState: CustomStates) => void,\n  ) {\n    this.getMeeting = getMeeting;\n    this.getStates = getGlobalStates;\n    this.getStateSetter = getGlobalStateSetter;\n  }\n  private updateStates(newState: CustomStates) {\n    this.setGlobalStates((oldState: CustomStates) => {\n      return {\n        ...oldState,\n        ...newState,\n      };\n    });\n  }\n  private roomJoinedListener = () => {\n    this.updateStates({meeting: 'joined'});\n  };\n\n  private socketServiceRoomJoinedListener = () => {\n    if (\n      this.meeting.stage.status === 'ON_STAGE' ||\n      this.meeting.stage.status === undefined\n    ) {\n      return;\n    }\n    this.updateStates({meeting: 'joined'});\n  };\n\n  private waitlistedListener = () => {\n    this.updateStates({meeting: 'waiting'});\n  };\n\n  private roomLeftListener = ({state}: {state: RoomLeftState}) => {\n    const states = this.states;\n    if (states?.roomLeftState === 'disconnected') {\n      this.updateStates({meeting: 'ended', roomLeftState: state});\n      return;\n    }\n    this.updateStates({meeting: 'ended', roomLeftState: state});\n  };\n\n  private mediaPermissionUpdateListener = ({\n    kind,\n    message,\n  }: {\n    kind: any; // PermissionSettings['kind'];\n    message: string;\n  }) => {\n    if (['audio', 'video'].includes(kind!)) {\n      if (\n        message === 'ACCEPTED' ||\n        message === 'NOT_REQUESTED' ||\n        this.states.activeDebugger\n      ) {\n        return;\n      }\n      const permissionModalSettings: any = {\n        enabled: true,\n        kind,\n      };\n      this.updateStates({activePermissionsMessage: permissionModalSettings});\n    }\n  };\n\n  private joinStateAcceptedListener = () => {\n    this.updateStates({activeJoinStage: true});\n  };\n\n  private handleChangingMeeting(destinationMeetingId: string) {\n    this.updateStates({\n      activeBreakoutRoomsManager: {\n        ...this.states.activeBreakoutRoomsManager,\n        active: this.states.activeBreakoutRoomsManager!.active,\n        destinationMeetingId,\n      },\n    });\n  }\n\n  addDyteEventListeners() {\n    if (this.meeting.meta.viewType === 'LIVESTREAM') {\n      this.meeting.self.addListener(\n        'socketServiceRoomJoined',\n        this.socketServiceRoomJoinedListener,\n      );\n    }\n    this.meeting.self.addListener('roomJoined', this.roomJoinedListener);\n\n    this.meeting.self.addListener('waitlisted', this.waitlistedListener);\n    this.meeting.self.addListener('roomLeft', this.roomLeftListener);\n    this.meeting.self.addListener(\n      'mediaPermissionUpdate',\n      this.mediaPermissionUpdateListener,\n    );\n    this.meeting.self.addListener(\n      'joinStageRequestAccepted',\n      this.joinStateAcceptedListener,\n    );\n\n    if (this.meeting.connectedMeetings.supportsConnectedMeetings) {\n      this.meeting.connectedMeetings.once(\n        'changingMeeting',\n        this.handleChangingMeeting,\n      );\n    }\n  }\n  cleanupDyteEventListeners() {}\n}\n\n"})}),"\n",(0,i.jsx)(t.p,{children:"Let's discuss the bits and pieces one by one."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"const theme = meeting!.self.config;\nconst { config } = generateConfig(theme, meeting!);\n"})}),"\n",(0,i.jsx)(t.p,{children:"In the above code snippets, we are generating configs using the preset configurations & meeting configs."}),"\n",(0,i.jsx)(t.p,{children:"Post this, We are extending the config to pass the targetElement to full screen toggle and storing this config to be passed to child components."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"setConfig({ ...config });\n"})}),"\n",(0,i.jsx)(t.p,{children:"We need to also ensure that web-core & ui-kit states are in sync. Since we are handling states now, we will have to add web-core & ui-kit listeners."}),"\n",(0,i.jsxs)(t.p,{children:["To add react-native-core listeners, ",(0,i.jsx)(t.code,{children:"DyteStateListenersUtils"})," class, is being used."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"const stateListenersUtils = new DyteStateListenersUtils(\n  () => meeting,\n  () => states,\n  () => setStates\n);\nstateListenersUtils.addDyteEventListeners();\n"})}),"\n",(0,i.jsxs)(t.p,{children:["To join the meeting, we are using ",(0,i.jsx)(t.code,{children:"await meeting.join();"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Now that we know the extra overhead that comes with splitting ",(0,i.jsx)(t.code,{children:"DyteMeeting"})," component, let's start with showing custom UIs as per the meeting state."]})]})}function m(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11258:function(e,t,n){n.d(t,{Z:()=>p});var s=n("85893"),i=n("15957"),a=n("67294");let o=e=>`import React, { useEffect } from 'react';
import { DyteProvider, useDyteClient } from '@dytesdk/react-web-core';
import { provideDyteDesignSystem } from '@dytesdk/react-ui-kit';
import Custom from './meeting.tsx';

const initInProgress = {
  value: false,
};

export default function App() {
  const [meeting, initMeeting] = useDyteClient();

  useEffect(() => {
    if (initInProgress.value) return;
    initInProgress.value = true;
    initMeeting({
      roomName: 'qplrfc-uuujcj',
      authToken:
        'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjdkYzU0MGRjLWQ5MjUtNDVjMi1hZTFiLWM2NDc2YTUwNmM2NyIsImxvZ2dlZEluIjp0cnVlLCJpYXQiOjE2NjU2NDcxNjksImV4cCI6MTY3NDI4NzE2OX0.hJvo1PV1_jaxwiQbT8ft7Yi4lhIPgAsuEJHqohHYC_2XNef7kA4NhrYLvwrrxOo3AKh9_XTjnj_bsgzIDh35RRggawJniEjuE83ju2xhMXMVaa7TNDje2BsH5-VnFJ4y5hOwxGphrP5iHY_U4k_0qOQcEfVEJMymJvx0gq_Ueds',
      defaults: {
        audio: false,
        video: false,
      },
    }).then((m) => {


      // window.meeting = m;
      m.meta.meetingStartedTimestamp = new Date();
      m.participants.setMockParticipantCount(5, 5);
      // m.recording.recordingState = 'RECORDING';
      const theme = document.getElementsByTagName('html')[0].dataset['theme'];
      initInProgress.value = false;
      provideDyteDesignSystem(document.body, {
        theme: "${e}",
      });
      document.getElementsByTagName("html")[0].classList.remove("dark");
      document.getElementsByTagName("html")[0].classList.remove("light");
      document.getElementsByTagName("html")[0].classList.add("${e}");

      HTMLAudioElement.prototype.play = function() {};
      window.tailwind.config.darkMode = 'selector';
    });
  }, []);


  return (<div className="bg-white dark:bg-black flex justify-center items-center w-full h-screen">
    <DyteProvider value={meeting}><Custom /></DyteProvider>
    </div>
  );
}`,r=`import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';

import { DyteComponentsModule } from '@dytesdk/angular-ui-kit';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, DyteComponentsModule],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}`;var l=n("79207"),d=n("73808");let c=function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return"react-ts"==e?{files:{"/App.tsx":o(t),"/meeting.tsx":n},activeFile:"/meeting.tsx",visibleFiles:["/meeting.tsx",...Object.keys(s)],scripts:[]}:"angular"==e?{files:{"/src/app/app.component.html":'<dyte-meeting #meeting show-setup-screen="true"></dyte-meeting>',"/src/app/app.component.ts":n,"/src/app/app.module.ts":r},activeFile:"/src/app/app.component.ts",visibleFiles:["/src/app/app.module.ts","/src/app/app.component.ts","/src/app/app.component.html",...Object.keys(s)],scripts:[]}:{activeFile:"/index.html",visibleFiles:["/index.html"],files:{"/index.html":n},scripts:["https://cdn.jsdelivr.net/npm/@dytesdk/web-core@1.31.0-stripped.2/dist/index.iife.js","https://assets.dyte.io/docs/web.js"]}},m=e=>"react-ts"==e?{"@dytesdk/react-ui-kit":"1.66.0","@dytesdk/react-web-core":"1.36.4-stripped.1","@dytesdk/web-core":"1.31.0-stripped.2"}:"angular"==e?{"@dytesdk/angular-ui-kit":"1.66.0","@dytesdk/web-core":"1.31.0-stripped.2"}:{},g=(e,t)=>{let n=[];return e.forEach(e=>{for(let t=e.start;t<=e.end;t++)n.push({className:"highlight",line:t})}),t.forEach(e=>{for(let t=e.start;t<=e.end;t++)n.push({className:"hide",line:t})}),n},u=e=>"light"===e?d.FM:d.pJ;function p(e){let{file:t,files:n={},framework:o="react-ts",entry:r,highlight:d=[],additionalDecorators:p=[],hide:h=[],minHeight:f="480px"}=e,{colorMode:x}=(0,l.I)(),S=c(o,x,t??"",n),v=m(o),y=[...p,...g(d,h)],[w,b]=(0,a.useState)(0===y.length);return(0,a.useEffect)(()=>{let e=()=>{0!==y.length&&!0==w&&b(!1)};return window.addEventListener("click",e),()=>{window.removeEventListener("click",e)}},[y.length,w]),(0,s.jsxs)(i.oT,{template:o,customSetup:{dependencies:{...v}},theme:u(x),options:{activeFile:S.activeFile,visibleFiles:S.visibleFiles,externalResources:["https://assets.dyte.io/docs/tailwind.js",...S.scripts]},files:S.files,children:[(0,s.jsxs)("div",{className:"relative top-2 z-10 flex w-fit items-center space-x-2 rounded-sm bg-neutral-800 p-1.5 text-xs font-bold text-neutral-100 dark:bg-neutral-300  dark:text-neutral-900",children:[(0,s.jsx)("span",{children:"LIVE EDITOR"}),(0,s.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 384 512",className:"ml-2 h-4",children:(0,s.jsx)("path",{fill:"#FFD43B",d:"M296 160H180.6l42.6-129.8C227.2 15 215.7 0 200 0H56C44 0 33.8 8.9 32.2 20.8l-32 240C-1.7 275.2 9.5 288 24 288h118.7L96.6 482.5c-3.6 15.2 8 29.5 23.3 29.5 8.4 0 16.4-4.4 20.8-12l176-304c9.3-15.9-2.2-36-20.7-36z"})})]}),(0,s.jsxs)("div",{className:"flex flex-col rounded-sm border border-secondary-700 mb-4",children:[(0,s.jsx)("div",{onClick:e=>{e.stopPropagation(),b(!0)},className:"cursor-text",children:w?(0,s.jsx)(i._V,{showLineNumbers:!0,showInlineErrors:!0,className:"code-viewer",style:{flexGrow:0,flexShrink:1,flexBasis:"max-content",maxHeight:"500px",overflow:"scroll"}}):(0,s.jsx)(i.Pw,{className:"code-viewer",initMode:"immediate",decorators:y,style:{flexGrow:0,flexShrink:1,flexBasis:"max-content",maxHeight:"500px"}})}),(0,s.jsx)(i.Gj,{showOpenInCodeSandbox:!1,className:"border-t-2 border-t-secondary-700",style:{flex:1,minHeight:f}})]})]})}}}]);
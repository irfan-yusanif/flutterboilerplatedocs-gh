"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["60970"],{35069:function(e,t,n){n.r(t),n.d(t,{default:()=>d,frontMatter:()=>r,metadata:()=>i,assets:()=>c,toc:()=>l,contentTitle:()=>o});var i=JSON.parse('{"id":"build-in-call-ui/build-your-own/states based UI Split","title":"States Based UI Split","description":"Source Code//github.com/dyte-io/react-native-samples/tree/main/samples/createyourown_ui","source":"@site/docs/rn-ui-kit/build-in-call-ui/build-your-own/states based UI Split.mdx","sourceDirName":"build-in-call-ui/build-your-own","slug":"/build-in-call-ui/build-your-own/states based UI Split","permalink":"/react-native/build-in-call-ui/build-your-own/states based UI Split","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"States Based UI Split","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Handling States and Configs","permalink":"/react-native/build-in-call-ui/build-your-own/handling-states-and-configs"},"next":{"title":"Customize Header","permalink":"/react-native/build-in-call-ui/build-your-own/customize-header"}}'),s=n("85893"),a=n("50065");let r={title:"States Based UI Split",sidebar_position:2},o=void 0,c={},l=[];function u(e){let t={a:"a",code:"code",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Source Code: ",(0,s.jsx)(t.a,{href:"https://github.com/dyte-io/react-native-samples/tree/main/samples/create_your_own_ui",children:"https://github.com/dyte-io/react-native-samples/tree/main/samples/create_your_own_ui"})]}),"\n",(0,s.jsx)(t.p,{children:"Now that the basic states and configs handling is taken care of, we can focus on customisation."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"states.meeting"})," represents the meeting state such as setup/ended/waiting/joined that can be utilised to show different screens."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import React from 'react';\nimport { View } from 'react-native';\n\nfunction CustomDyteMeetingUI({\n  meeting,\n  config,\n  states,\n  setStates,\n}: {\n  meeting: DyteClient;\n  config: UIConfig;\n  states: CustomStates;\n  setStates: SetStates;\n}) {\n  if (!meeting) {\n    return <View> A loading screen comes here </View>;\n  }\n\n  if (states.meeting === 'setup') {\n    return <View>Pre-call UI comes here </View>;\n  }\n\n  if (states.meeting === 'ended') {\n    return <View>Post-call UI comes here </View>;\n  }\n\n  if (states.meeting === 'waiting') {\n    return <View>Waiting room UI comes here </View>;\n  }\n\n  if (states.meeting === 'joined') {\n    return <View>In-call UI comes here </View>;\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Since we have already discussed how you can ",(0,s.jsx)(t.a,{href:"/react-native/build-pre-call-ui/default-setup-screen",children:"build a custom pre-call UI from scratch"}),", we will now focus exclusively on the in-meeting UI."]}),"\n",(0,s.jsx)(t.p,{children:"In the next steps, we will learn how we can create custom header, footer and the stage UI using Dyte components."})]})}function d(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return r}});var i=n(67294);let s={},a=i.createContext(s);function r(e){let t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);
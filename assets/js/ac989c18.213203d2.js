"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["44731"],{15269:function(e,i,n){n.r(i),n.d(i,{default:()=>u,frontMatter:()=>r,metadata:()=>a,assets:()=>o,toc:()=>s,contentTitle:()=>t});var a=JSON.parse('{"id":"pre-call/media-preview","title":"Media Preview","description":"Before joining a meeting, users may want to preview and configure their media devices like camera, microphone, and audio output.","source":"@site/docs/android-core/pre-call/1-media-preview.mdx","sourceDirName":"pre-call","slug":"/pre-call/media-preview","permalink":"/flutterboilerplatedocs/android-core/pre-call/media-preview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Breaking Changes and Migration Guide","permalink":"/flutterboilerplatedocs/android-core/upgrade-v2/breaking-changes-migration"},"next":{"title":"Handling Device Permissions","permalink":"/flutterboilerplatedocs/android-core/pre-call/handling-permissions"}}'),l=n("85893"),d=n("50065");let r={},t="Media Preview",o={},s=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Toggling Media",id:"toggling-media",level:3},{value:"Changing Media Device",id:"changing-media-device",level:3}];function c(e){let i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.a)(),...e.components},{TabItem:n,Tabs:a}=i;return!n&&h("TabItem",!0),!a&&h("Tabs",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.header,{children:(0,l.jsx)(i.h1,{id:"media-preview",children:"Media Preview"})}),"\n",(0,l.jsx)(i.p,{children:"Before joining a meeting, users may want to preview and configure their media devices like camera, microphone, and audio output.\nThis section provides developers with the tools to prepare the media environment before joining a Dyte meeting."}),"\n",(0,l.jsxs)(i.p,{children:["If you are using our UI Kits, this functionality can be handled by ",(0,l.jsx)(i.code,{children:"DyteSetupFragment"})," or built with ",(0,l.jsx)(i.code,{children:"DyteParticipantTileView"}),"\nand ",(0,l.jsx)(i.code,{children:"DyteSettingsFragment"})," components."]}),"\n",(0,l.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"meeting.localUser.audioEnabled"}),": A ",(0,l.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the audio currently enabled."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"meeting.localUser.videoEnabled"}),": A ",(0,l.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the video currently enabled."]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(i.h3,{id:"toggling-media",children:"Toggling Media"}),"\n",(0,l.jsx)(i.p,{children:"The same methods used for controlling media during a meeting are also applicable for pre-call media configuration."}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"1. Mute/Unmute microphone"})}),"\n",(0,l.jsxs)(a,{groupId:"android-core-media-preview",children:[(0,l.jsx)(n,{value:"kotlin",label:"Kotlin",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-kotlin",children:"// Mute Audio\nmeeting.localUser.disableAudio {}\n\n// Unmute Audio\nmeeting.localUser.enableAudio {}\n"})})}),(0,l.jsx)(n,{value:"java",label:"Java",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-java",children:"// Mute Audio\nmeeting.localUser.disableAudio(error -> null);\n\n// Unmute Audio\nmeeting.localUser.enableAudio(error -> null);\n"})})})]}),"\n",(0,l.jsx)(i.mermaid,{value:'flowchart LR\n    classDef basic fill:white;\n\n    eam("enableAudio()") --\x3e success("Gives <code>onAudioUpdate</code> callback to <code>DyteSelfEventsListener</code>")\n\n    class eam basic;'}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsxs)(i.p,{children:["Anytime there is an update in the audio state of the local user, the Core SDK notifies the client through the ",(0,l.jsx)(i.code,{children:"onAudioUpdate"})," callback\nfrom ",(0,l.jsx)(i.code,{children:"DyteSelfEventsListener"}),". Here's how you can register the listener:"]}),"\n",(0,l.jsxs)(a,{groupId:"android-core-media-preview",children:[(0,l.jsx)(n,{value:"kotlin",label:"Kotlin",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-kotlin",children:"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\n    override fun onAudioUpdate(isEnabled: Boolean) {\n        // Show a visual preview of the audio to the user if enabled\n    }\n})\n"})})}),(0,l.jsx)(n,{value:"java",label:"Java",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-java",children:"meeting.addSelfEventsListener(new DyteSelfEventsListener() {\n    @Override\n    public void onAudioUpdate(boolean isEnabled) {\n        // Show a visual preview of the audio to the user if enabled\n    }\n});\n"})})})]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"2. Enable/Disable camera"})}),"\n",(0,l.jsxs)(a,{groupId:"android-core-media-preview",children:[(0,l.jsx)(n,{value:"kotlin",label:"Kotlin",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-kotlin",children:"// Disable Video\nmeeting.localUser.disableVideo {}\n\n// Enable Video\nmeeting.localUser.enableVideo {}\n"})})}),(0,l.jsx)(n,{value:"java",label:"Java",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-java",children:"// Disable Video\nmeeting.localUser.disableVideo(error -> null);\n\n// Enable Video\nmeeting.localUser.enableVideo(error -> null);\n"})})})]}),"\n",(0,l.jsx)(i.mermaid,{value:'flowchart LR\n    classDef basic fill:white;\n\n    eam("enableVideo()") --\x3e success("Gives <code>onVideoUpdate</code> callback to <code>DyteSelfEventsListener</code>")\n\n    class eam basic;'}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsxs)(i.p,{children:["Whenever there is an update in the video state of the local user, the Core SDK notifies the client through the ",(0,l.jsx)(i.code,{children:"onVideoUpdate"})," callback\nfrom ",(0,l.jsx)(i.code,{children:"DyteSelfEventsListener"}),". Here's how you can register the listener:"]}),"\n",(0,l.jsxs)(a,{groupId:"android-core-media-preview",children:[(0,l.jsx)(n,{value:"kotlin",label:"Kotlin",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-kotlin",children:"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\n    override fun onVideoUpdate(isEnabled: Boolean) {\n        // Show local user's VideoView if video is enabled\n    }\n})\n"})})}),(0,l.jsx)(n,{value:"java",label:"Java",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-java",children:"meeting.addSelfEventsListener(new DyteSelfEventsListener() {\n    @Override\n    public void onVideoUpdate(boolean isEnabled) {\n        // Show local user's VideoView if video is enabled\n    }\n});\n"})})})]}),"\n",(0,l.jsx)(i.h3,{id:"changing-media-device",children:"Changing Media Device"}),"\n",(0,l.jsx)(i.p,{children:"Media devices represent the hardware for the camera, microphone, and speaker devices. To get the list of media devices currently\navailable, use the following methods:"}),"\n",(0,l.jsx)(i.p,{children:"To get the currently selected media device, use the following methods:"}),"\n",(0,l.jsxs)(a,{groupId:"android-core-media-preview",children:[(0,l.jsx)(n,{value:"kotlin",label:"Kotlin",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-kotlin",children:"// Get current audio device being used\nval currentAudioDevice = meeting.localUser.getSelectedAudioDevice()\n\n// Get current video device being used\nval currentVideoDevice = meeting.localUser.getSelectedVideoDevice()\n"})})}),(0,l.jsx)(n,{value:"java",label:"Java",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-java",children:"// Get current audio device being used\nDyteAudioDevice currentAudioDevice = meeting.localUser.getSelectedAudioDevice();\n\n// Get current video device being used\nDyteVideoDevice currentVideoDevice = meeting.localUser.getSelectedVideoDevice();\n"})})})]}),"\n",(0,l.jsx)(i.p,{children:"Use these methods to create a UI that allows users to configure their media devices. When the user selects a device, use the below methods to set the device."}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"Set device"})}),"\n",(0,l.jsxs)(a,{groupId:"android-core-media-preview",children:[(0,l.jsx)(n,{value:"kotlin",label:"Kotlin",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-kotlin",children:"// Set audio device\nmeeting.localUser.setAudioDevice(device)\n// eg. device = audioDevices[0]\n\n// Set video device\nmeeting.localUser.setVideoDevice(device)\n// eg. device = videoDevices[0]\n"})})}),(0,l.jsx)(n,{value:"java",label:"Java",default:!0,children:(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-java",children:"// Set audio device\nmeeting.localUser.setAudioDevice(device);\n// eg. device = audioDevices.get(0)\n\n// Set video device\nmeeting.localUser.setVideoDevice(device);\n// eg. device = videoDevices.get(0)\n"})})})]})]})}function u(e={}){let{wrapper:i}={...(0,d.a)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}function h(e,i){throw Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},50065:function(e,i,n){n.d(i,{Z:function(){return t},a:function(){return r}});var a=n(67294);let l={},d=a.createContext(l);function r(e){let i=a.useContext(d);return a.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),a.createElement(d.Provider,{value:i},e.children)}}}]);
"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["16000"],{54051:function(e,n,t){t.r(n),t.d(n,{default:()=>l,frontMatter:()=>s,metadata:()=>i,assets:()=>p,toc:()=>d,contentTitle:()=>c});var i=JSON.parse('{"id":"participants/events","title":"Participant Events","description":"Dive into the details of handling participant events in your iOS application using Dyte\'s comprehensive documentation.","source":"@site/docs/ios-core/participants/events.mdx","sourceDirName":"participants","slug":"/participants/events","permalink":"/flutterboilerplatedocs/ios-core/participants/events","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"ios-core","permalink":"/flutterboilerplatedocs/ios-core/tags/ios-core"},{"inline":true,"label":"participants","permalink":"/flutterboilerplatedocs/ios-core/tags/participants"},{"inline":true,"label":"self","permalink":"/flutterboilerplatedocs/ios-core/tags/self"}],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Participant Events","description":"Dive into the details of handling participant events in your iOS application using Dyte\'s comprehensive documentation.","sidebar_position":3,"tags":["ios-core","participants","self"]},"sidebar":"tutorialSidebar","previous":{"title":"Participant Object","permalink":"/flutterboilerplatedocs/ios-core/participants/participant-object"},"next":{"title":"Waitlisted Participants","permalink":"/flutterboilerplatedocs/ios-core/participants/waitlisted-participants"}}'),a=t("85893"),r=t("50065");let s={title:"Participant Events",description:"Dive into the details of handling participant events in your iOS application using Dyte's comprehensive documentation.",sidebar_position:3,tags:["ios-core","participants","self"]},c="All Participant Events",p={},d=[{value:"Participant joined",id:"participant-joined",level:2},{value:"Participant left",id:"participant-left",level:2},{value:"Participant update",id:"participant-update",level:2},{value:"Video update",id:"video-update",level:2},{value:"Audio update",id:"audio-update",level:2},{value:"Screenshare updates",id:"screenshare-updates",level:2},{value:"Active speaker",id:"active-speaker",level:2},{value:"Pinned participant",id:"pinned-participant",level:2},{value:"Active participants list change",id:"active-participants-list-change",level:2},{value:"Participant update",id:"participant-update-1",level:3},{value:"Video update",id:"video-update-1",level:3},{value:"Audio update",id:"audio-update-1",level:3},{value:"Pinned &amp; Unpinned participant",id:"pinned--unpinned-participant",level:3},{value:"Screen share started &amp; ended",id:"screen-share-started--ended",level:3}];function o(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.a)(),...e.components},{Head:t}=n;return!t&&function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"all-participant-events",children:"All Participant Events"})}),"\n",(0,a.jsxs)(n.p,{children:["You can subscribe to events for all participants by implementing\n",(0,a.jsx)(n.code,{children:"DyteParticipantEventsListener"})," protocol and then passing that object to\n",(0,a.jsx)(n.code,{children:"meeting.addParticipantEventsListener(dyteParticipantEventsListener)"})," method."]}),"\n",(0,a.jsx)(n.p,{children:"Here are the supported methods:"}),"\n",(0,a.jsx)(n.h2,{id:"participant-joined",children:"Participant joined"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when any participant joins the meeting."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantJoin(participant: DyteMeetingParticipant) {\n            // your code here to handle new participant\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"participant-left",children:"Participant left"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when any participant leaves the meeting."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantLeave(participant: DyteMeetingParticipant) {\n            // your code here to handle participant left from meeting\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"participant-update",children:"Participant update"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event whenever there is any change in participant."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onUpdate(participants: DyteParticipants) {\n            // your code here to handle participant update\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"video-update",children:"Video update"}),"\n",(0,a.jsx)(n.p,{children:"Trigger an event when any participant starts / stops video."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onVideoUpdate(videoEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant video toggle update\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"audio-update",children:"Audio update"}),"\n",(0,a.jsx)(n.p,{children:"Trigger an event when any participant starts / stops audio."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onAudioUpdate(audioEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant audio toggle update\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"screenshare-updates",children:"Screenshare updates"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when there is any change in screenshares in a meeting."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onScreenSharesUpdated() {\n            // your code here to handle screenshares from meeting\n            // you can use `meeting.participants.screenshares` to get latest screenshare participants\n        }\n\n        func onScreenShareStarted(participant: DyteJoinedMeetingParticipant) {\n            // participant stared presenting screen in the meeting\n        }\n\n        func onScreenShareEnded(participant: DyteJoinedMeetingParticipant) {\n            // participant stopped presenting screen in the meeting\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"active-speaker",children:"Active speaker"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when any is change in active speaker in the meeting."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveSpeakerChanged(participant: DyteMeetingParticipant) {\n            // your code here to handle active speaker\n        }\n\n        func onNoActiveSpeaker() {\n            // your code here to handle no active speaker\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"pinned-participant",children:"Pinned participant"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when there is any change in pinned participant in the meeting."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantPinned(participant: DyteMeetingParticipant) {\n            // your code here to show pinned participant\n        }\n\n        func onParticipantUnpinned(participant: DyteJoinedMeetingParticipant) {\n            // your code here to remove pinned participant\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"active-participants-list-change",children:"Active participants list change"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when any is change in active participants list in the meeting."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveParticipantsChanged(active: [DyteMeetingParticipant]) {\n            // your code here to refresh active participants\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h1,{id:"single-participant-events",children:"Single Participant Events"}),"\n",(0,a.jsxs)(n.p,{children:["You can also subscribe to events for a single participant by implementing ",(0,a.jsx)(n.code,{children:"DyteParticipantUpdateListener"})," protocol and then passing that object to ",(0,a.jsx)(n.code,{children:"participant.addParticipantUpdateListener(dyteParticipantUpdateListener)"})," method."]}),"\n",(0,a.jsx)(n.p,{children:"Here are the supported methods:"}),"\n",(0,a.jsx)(n.h3,{id:"participant-update-1",children:"Participant update"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event whenever there is any change in participant."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantUpdateListener {\n        func onUpdate() {\n            // your code here to handle participant update\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"video-update-1",children:"Video update"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when the participant starts / stops video."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantUpdateListener {\n        func onVideoUpdate(isEnabled: Bool) {\n            // your code here to handle participant video toggle update\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"audio-update-1",children:"Audio update"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when the participant starts / stops audio."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantUpdateListener {\n        func onAudioUpdate(isEnabled: Bool) {\n            // your code here to handle participant audio toggle update\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pinned--unpinned-participant",children:"Pinned & Unpinned participant"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when the participant is pinned / unpinned."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantUpdateListener {\n        func onPinned() {\n            // your code here to show pinned participant\n        }\n\n        func onUnpinned() {\n            // your code here to remove pinned participant\n        }\n    }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"screen-share-started--ended",children:"Screen share started & ended"}),"\n",(0,a.jsx)(n.p,{children:"Triggers an event when the participant starts / stops screen sharing."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantUpdateListener {\n        func onScreenShareStarted() {\n            // your code here to handle screen share started\n        }\n\n        func onScreenShareEnded() {\n            // your code here to handle screen share ended\n        }\n    }\n"})}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("title",{children:"iOS Core The participant events"}),(0,a.jsx)("meta",{name:"description",content:"Explore the Dyte Mobile Core iOS Participants Participant Events."})]})]})}function l(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return s}});var i=t(67294);let a={},r=i.createContext(a);function s(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
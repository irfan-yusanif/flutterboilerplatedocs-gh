"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["55428"],{63795:function(t,e,i){i.r(e),i.d(e,{default:()=>l,frontMatter:()=>s,metadata:()=>n,assets:()=>c,toc:()=>d,contentTitle:()=>o});var n=JSON.parse('{"id":"participants/waitlisted-participants","title":"Waitlisted Participants","description":"Events, methods and data to manage waiting room participants.","source":"@site/docs/android-core/participants/waitlisted-participants.mdx","sourceDirName":"participants","slug":"/participants/waitlisted-participants","permalink":"/android-core/participants/waitlisted-participants","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"android-core","permalink":"/android-core/tags/android-core"},{"inline":true,"label":"participants","permalink":"/android-core/tags/participants"},{"inline":true,"label":"waitlisted","permalink":"/android-core/tags/waitlisted"},{"inline":true,"label":"waiting room","permalink":"/android-core/tags/waiting-room"}],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Waitlisted Participants","description":"Events, methods and data to manage waiting room participants.","sidebar_position":4,"tags":["android-core","participants","waitlisted","waiting room"]},"sidebar":"tutorialSidebar","previous":{"title":"Participant Events","permalink":"/android-core/participants/events"},"next":{"title":"Introduction","permalink":"/android-core/chat/introduction"}}'),a=i("85893"),r=i("50065");let s={title:"Waitlisted Participants",description:"Events, methods and data to manage waiting room participants.",sidebar_position:4,tags:["android-core","participants","waitlisted","waiting room"]},o=void 0,c={},d=[{value:"Accepting Requests",id:"accepting-requests",level:3},{value:"Rejecting Requests",id:"rejecting-requests",level:3},{value:"Waiting Room Events",id:"waiting-room-events",level:3}];function p(t){let e={code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...t.components},{Head:i}=e;return!i&&function(t,e){throw Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:["Participants in the waiting room are represented by ",(0,a.jsx)(e.code,{children:"DyteWaitlistedParticipant"})," objects. If the local user has the permission to\naccept waiting room requests (",(0,a.jsx)(e.code,{children:"selfPermissions.host.canAcceptRequests"})," is true), you can manage pending waiting room requests,\naccepting or rejecting them as needed.\nYou can access the list of waitlisted participants via the ",(0,a.jsx)(e.code,{children:"meeting.participants.waitlisted"})," property."]}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Note"}),": If the local user is not a host, ",(0,a.jsx)(e.code,{children:"meeting.participants.waitlisted"})," property returns an empty list."]}),"\n",(0,a.jsx)(e.h3,{id:"accepting-requests",children:"Accepting Requests"}),"\n",(0,a.jsxs)(e.p,{children:["To accept a waiting room request, use the acceptWaitListedRequest() method on a ",(0,a.jsx)(e.code,{children:"DyteWaitlistedParticipant"})," object:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-kotlin",children:"val waitlistedParticipant = meeting.participants.waitlisted[0]\nwaitlistedParticipant.acceptWaitListedRequest()\n"})}),"\n",(0,a.jsx)(e.h3,{id:"rejecting-requests",children:"Rejecting Requests"}),"\n",(0,a.jsxs)(e.p,{children:["To deny a waiting room request, use the ",(0,a.jsx)(e.code,{children:"rejectWaitListedRequest()"})," method on a ",(0,a.jsx)(e.code,{children:"DyteWaitlistedParticipant"})," object:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-kotlin",children:"val waitlistedParticipant = meeting.participants.waitlisted[0]\nwaitlistedParticipant.rejectWaitListedRequest()\n"})}),"\n",(0,a.jsx)(e.h3,{id:"waiting-room-events",children:"Waiting Room Events"}),"\n",(0,a.jsxs)(e.p,{children:["Implement the ",(0,a.jsx)(e.code,{children:"DyteWaitlistEventsListener"})," interface to listen for events related to the waiting room:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-kotlin",children:"meeting.addWaitlistEventsListener(object: DyteWaitlistEventsListener {\n    override fun onWaitListParticipantJoined(participant: DyteWaitlistedParticipant) {\n        // Triggered when a new participant joins the waiting room\n    }\n\n    override fun onWaitListParticipantAccepted(participant: DyteWaitlistedParticipant) {\n        // Triggered when a waitlisted participant is accepted into the meeting\n    }\n\n    override fun onWaitListParticipantRejected(participant: DyteWaitlistedParticipant) {\n        // Triggered when a waitlisted participant is denied entry into the meeting\n    }\n\n    override fun onWaitListParticipantClosed(participant: DyteWaitlistedParticipant) {\n        // Triggered when a waitlisted participant leaves the waiting room\n    }\n})\n"})}),"\n",(0,a.jsx)(i,{children:(0,a.jsx)("title",{children:"Android Core Waitlisted Participants"})})]})}function l(t={}){let{wrapper:e}={...(0,r.a)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(p,{...t})}):p(t)}},50065:function(t,e,i){i.d(e,{Z:function(){return o},a:function(){return s}});var n=i(67294);let a={},r=n.createContext(a);function s(t){let e=n.useContext(r);return n.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),n.createElement(r.Provider,{value:e},t.children)}}}]);
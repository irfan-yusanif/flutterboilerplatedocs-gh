"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["24527"],{52777:function(e,n,i){i.r(n),i.d(n,{default:()=>h,frontMatter:()=>a,metadata:()=>s,assets:()=>o,toc:()=>l,contentTitle:()=>r});var s=JSON.parse('{"id":"pre-call/media-preview","title":"Media Preview","description":"This section focuses on pre-call functionality, providing developers with the tools needed to prepare the media environment before joining the meeting. If you are using our UI Kits, this will be handled by DyteSetupScreen or could be built with DyteParticipantTile and other components.","source":"@site/docs/rn-core/pre-call/1-media-preview.mdx","sourceDirName":"pre-call","slug":"/pre-call/media-preview","permalink":"/flutterboilerplatedocs/rn-core/pre-call/media-preview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Quickstart","permalink":"/flutterboilerplatedocs/rn-core/quickstart"},"next":{"title":"Handling Permissions","permalink":"/flutterboilerplatedocs/rn-core/pre-call/handling-permissions"}}'),t=i("85893"),d=i("50065");let a={},r="Media Preview",o={},l=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Toggling Media",id:"toggling-media",level:3},{value:"Changing Media Device",id:"changing-media-device",level:3}];function c(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"media-preview",children:"Media Preview"})}),"\n",(0,t.jsxs)(n.p,{children:["This section focuses on pre-call functionality, providing developers with the tools needed to prepare the media environment before joining the meeting. If you are using our UI Kits, this will be handled by ",(0,t.jsx)(n.code,{children:"DyteSetupScreen"})," or could be built with ",(0,t.jsx)(n.code,{children:"DyteParticipantTile"})," and other components."]}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"audioEnabled"}),": A ",(0,t.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the audio currently enabled."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"videoEnabled"}),": A ",(0,t.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the video currently enabled."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"audioTrack"}),": The audio track for the local user."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"videoTrack"}),": The video track for the local user."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"toggling-media",children:"Toggling Media"}),"\n",(0,t.jsx)(n.p,{children:"The same methods used by post joining meeting are also used to control media-pre meeting."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Mute/Unmute microphone"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Mute Audio\nawait meeting.self.disableAudio();\n\n// Unmute Audio\nawait meeting.self.enableAudio();\n"})}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    classDef basic fill:white;\n\n    eam("enableAudio()") --\x3e success("Emits <code>audioUpdate</code> event on <code>self</code>")\n    eam -. possibly .-> indirect("Update <code>mediaPermissions.audio</code> with <code>mediaPermissionUpdate</code> event")\n    indirect --\x3e hooks("Hook re-render")\n    class eam basic;'}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const audioEnabled = useDyteSelector((m) => m.self.audioEnabled);\nconst audioTrack = useDyteSelector((m) => m.self.audioTrack);\n"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["or if you want a traditional JS event you can use the ",(0,t.jsx)(n.code,{children:"audioUpdate"})," event"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Alternatively\nuseEffect(() => {\n  if(!meeting) return;\n\n  const onAudioUpdate = ({ audioEnabled, audioTrack })=> {\n  // if enabled show a visual(izer) preview of the audio to the user\n  };\n\n  meeting.self.on('audioUpdate', onAudioUpdate);\n  return () => {\n    meeting.self.removeListener('audioUpdate', onAudioUpdate)\n  }\n}, [meeting])\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Enable/Disable camera"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Disable Video\nawait meeting.self.disableVideo();\n\n// Enable Video\nawait meeting.self.enableVideo();\n"})}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    classDef basic fill:white;\n\n    eam("enableVideo()") --\x3e success("Emits <code>videoUpdate</code> event on <code>self</code>")\n    eam -. possibly .-> indirect("Update <code>mediaPermissions.audio</code> with <code>mediaPermissionUpdate</code> event")\n\n    class eam basic;'}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const videoEnabled = useDyteSelector((m) => m.self.videoEnabled);\nconst videoTrack = useDyteSelector((m) => m.self.videoTrack);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"changing-media-device",children:"Changing Media Device"}),"\n",(0,t.jsx)(n.p,{children:"Media devices represents the hardware for the camera, microphone and speaker\ndevices. To get the list of media devices that are currently being used, you can\nuse the following methods:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Fetch current media devices being used\nconst currentDevices = meeting.self.getCurrentDevices();\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Get all media devices\nconst devices = meeting.self.getAllDevices();\n\n// Get all audio devices\nconst audioDevices = meeting.self.getAudioDevices();\n\n// Get all video devices\nconst videoDevices = meeting.self.getVideoDevices();\n\n// Get all speakers\nconst speakerDevices = meeting.self.getSpeakerDevices();\n"})}),"\n",(0,t.jsx)(n.p,{children:"These methods should be called when you want the user to be shown these preferences. When the user selects a device, use the below method to select the device."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Set device"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"meeting.self.setDevice(device);\n// eg. device = videoDevices[0];\n"})})]})}function h(e={}){let{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,n,i){i.d(n,{Z:function(){return r},a:function(){return a}});var s=i(67294);let t={},d=s.createContext(t);function a(e){let n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);
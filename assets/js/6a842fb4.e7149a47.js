"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["38405"],{37591:function(e,i,t){t.r(i),t.d(i,{default:()=>p,frontMatter:()=>o,metadata:()=>n,assets:()=>d,toc:()=>s,contentTitle:()=>l});var n=JSON.parse('{"id":"render-participant-videos/custom-ui","title":"Building Your Own UI","description":"In this guide, we will walk you through building a custom UI to render participant videos using","source":"@site/docs/android/render-participant-videos/custom-ui.mdx","sourceDirName":"render-participant-videos","slug":"/render-participant-videos/custom-ui","permalink":"/flutterboilerplatedocs/android/render-participant-videos/custom-ui","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Building Your Own UI","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Using DyteGridView","permalink":"/flutterboilerplatedocs/android/render-participant-videos/using-dytegrid"},"next":{"title":"Prebuilt Chat Screen","permalink":"/flutterboilerplatedocs/android/chat/prebuilt-screen"}}'),a=t("85893"),r=t("50065");let o={title:"Building Your Own UI",sidebar_position:2},l=void 0,d={},s=[{value:"Video Calling Example",id:"video-calling-example",level:2},{value:"Using DyteParticipantTileView",id:"using-dyteparticipanttileview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Building the UI",id:"building-the-ui",level:2},{value:"Wrap-Up",id:"wrap-up",level:2},{value:"Complete Code",id:"complete-code",level:3}];function c(e){let i={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.p,{children:"In this guide, we will walk you through building a custom UI to render participant videos using\nDyte's Android UI Kit. We will use an example of a video calling app like FaceTime to demonstrate\nhow to display participant videos in your own UI."}),"\n",(0,a.jsx)(i.h2,{id:"video-calling-example",children:"Video Calling Example"}),"\n",(0,a.jsx)(i.p,{children:"Let's consider a video calling app where two participants are in a call. The UI of our example app\nwill feature:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Remote Participant Tile"}),": This tile will render the video of the other participant, occupying\nthe main area of the screen"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Local User Tile"}),": Positioned at the right-bottom corner, this tile will display your video\ni.e. of the local user"]}),"\n"]}),"\n",(0,a.jsx)("img",{src:"/static/android-ui-kit/render-participant-videos/render-videos-example-ui-wireframe.png",width:"252",height:"560",alt:"Video Calling Example Wireframe",className:"mb-10"}),"\n",(0,a.jsx)(i.h2,{id:"using-dyteparticipanttileview",children:"Using DyteParticipantTileView"}),"\n",(0,a.jsxs)(i.p,{children:["To achieve this UI, we will utilize the ",(0,a.jsx)(i.code,{children:"DyteParticipantTileView"})," provided by Dyte's Android UI Kit.\nThis custom Android view renders the video of a single participant and automatically handles displaying\nthe video or a placeholder when the participant turns their camera on or off."]}),"\n",(0,a.jsx)(i.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,a.jsx)(i.p,{children:"Before we begin, let's understand the key components we'll be working with:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"DyteParticipantTileView"}),": Renders the video of a single participant"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"DyteJoinedMeetingParticipant"}),": Represents a participant who has joined the meeting. The joined list\nin ",(0,a.jsx)(i.code,{children:"DyteParticipants"})," holds objects of this type"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"DyteSelfParticipant"}),": Represents the local user"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"DyteMobileClient"}),": Provides access to meeting and participant information. Use the ",(0,a.jsx)(i.code,{children:"meeting.participants.joined"})," list\nto retrieve the list of participants who have joined the meeting"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"building-the-ui",children:"Building the UI"}),"\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"XML Layout"}),": Define the layout of your video calling screen. Use two ",(0,a.jsx)(i.code,{children:"DyteParticipantTileViews"}),"\nto represent the remote participant and the local user."]}),"\n"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".VideoCallActivity">\n\n    <dyte.io.uikit.view.participanttile.DyteParticipantTileView\n        android:id="@+id/dyteparticipanttileview_remote_participant"\n        android:layout_width="0dp"\n        android:layout_height="0dp"\n        android:layout_margin="16dp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n    <dyte.io.uikit.view.participanttile.DyteParticipantTileView\n        android:id="@+id/dyteparticipanttileview_self_participant"\n        android:layout_width="144dp"\n        android:layout_height="200dp"\n        android:layout_margin="24dp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n'})}),"\n",(0,a.jsxs)(i.ol,{start:"2",children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"UI Logic"}),": Bind the DyteParticipantTileViews to the respective participants and activate\nthem to render the videos."]}),"\n"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-kotlin",children:"import dyte.io.uikit.view.participanttile.DyteParticipantTileView\nimport io.dyte.core.DyteMobileClient\n\nclass VideoCallActivity : AppCompatActivity() {\n    private lateinit var selfParticipantTileView: DyteParticipantTileView\n    private lateinit var remoteParticipantTileView: DyteParticipantTileView\n    private val meeting: DyteMobileClient by lazy { DyteUIKitBuilder.meeting }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_video_call)\n\n        selfParticipantTileView = findViewById(R.id.dyteparticipanttileview_self_participant)\n        remoteParticipantTileView = findViewById(R.id.dyteparticipanttileview_remote_participant)\n\n        activateUI(meeting)\n    }\n\n    private fun activateUI(meeting: DyteMobileClient) {\n        val localUser = meeting.localUser\n        val remoteParticipant = meeting.participants.joined.firstOrNull { it.id != localUser.id } ?: return\n\n        selfParticipantTileView.activate(localUser)\n        remoteParticipantTileView.activate(remoteParticipant)\n    }\n}\n"})}),"\n",(0,a.jsxs)(i.ol,{start:"3",children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Adding Controls"})," (Bonus): You can easily add controls like mic toggle, camera toggle,\nand leave call button using the ",(0,a.jsx)(i.a,{href:"/android/components/dyte-mic-toggle",children:"DyteMicToggleButton"}),",\n",(0,a.jsx)(i.a,{href:"/android/components/dyte-camera-toggle",children:"DyteCameraToggleButton"}),", and ",(0,a.jsx)(i.a,{href:"/android/components/dyte-leave-button",children:"DyteLeaveButton"}),"\nprovided by Dyte's Android UI Kit."]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"Here's the screenshot of the UI implemented:"}),"\n",(0,a.jsx)("img",{src:"/static/android-ui-kit/render-participant-videos/render-videos-custom-ui-impl.png",width:"252",height:"560",alt:"Video Calling Example UI",className:"mb-10"}),"\n",(0,a.jsx)(i.h2,{id:"wrap-up",children:"Wrap-Up"}),"\n",(0,a.jsxs)(i.p,{children:["Congratulations! You've successfully built a custom UI to render participant videos using Dyte's Android UI Kit.",(0,a.jsx)(i.br,{}),"\n","With components like ",(0,a.jsx)(i.strong,{children:"DyteGridView"})," and ",(0,a.jsx)(i.strong,{children:"DyteParticipantTileView"}),", Dyte's UI Kit simplifies video rendering\nin meetings and offers the flexibility to create dynamic video calling experiences."]}),"\n",(0,a.jsx)(i.h3,{id:"complete-code",children:"Complete Code"}),"\n",(0,a.jsxs)(i.p,{children:["You can find the complete code for this example in Dyte's ",(0,a.jsx)(i.a,{href:"https://github.com/dyte-io/android-samples/tree/main/samples/facetime",children:"Facetime sample repository"}),".\nFeel free to explore and try it out!"]})]})}function p(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},50065:function(e,i,t){t.d(i,{Z:function(){return l},a:function(){return o}});var n=t(67294);let a={},r=n.createContext(a);function o(e){let i=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);
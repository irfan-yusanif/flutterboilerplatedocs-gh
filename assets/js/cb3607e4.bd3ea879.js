"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["74947"],{74802:function(e,t,n){n.r(t),n.d(t,{default:()=>d,frontMatter:()=>r,metadata:()=>i,assets:()=>o,toc:()=>c,contentTitle:()=>s});var i=JSON.parse('{"id":"participants/type-of-participants","title":"Participant Types","description":"Learn how to handle various types of participants in your iOS app using Dyte\'s participant view controllers with our detailed documentation.","source":"@site/docs/ios/participants/type-of-participants.mdx","sourceDirName":"participants","slug":"/participants/type-of-participants","permalink":"/flutterboilerplatedocs/ios/participants/type-of-participants","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"image":"/static/ui-kit/1.x.x/components/participant-types.svg","sidebar_position":3,"description":"Learn how to handle various types of participants in your iOS app using Dyte\'s participant view controllers with our detailed documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Pre-built Participants Screen","permalink":"/flutterboilerplatedocs/ios/participants/pre-built-participants-screen"},"next":{"title":"Host Controls","permalink":"/flutterboilerplatedocs/ios/participants/host-controls"}}'),l=n("85893"),a=n("50065");let r={image:"/static/ui-kit/1.x.x/components/participant-types.svg",sidebar_position:3,description:"Learn how to handle various types of participants in your iOS app using Dyte's participant view controllers with our detailed documentation."},s="Participant Types",o={},c=[{value:"Participant Cell Configuration",id:"participant-cell-configuration",level:2}];function p(e){let t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"participant-types",children:"Participant Types"})}),"\n",(0,l.jsx)(t.p,{children:"This documentation explains how to handle different types of participants in your iOS app using Dyte's participant view controllers."}),"\n",(0,l.jsx)(t.h2,{id:"participant-cell-configuration",children:"Participant Cell Configuration"}),"\n",(0,l.jsxs)(t.p,{children:["We need a ",(0,l.jsx)(t.code,{children:"tableView"})," to show different types of participants on this screen.\nThe following code snippet demonstrates how to configure participant cells based on their types."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-swift",children:"public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    let cell =  self.viewModel.dataSourceTableView.configureCell(tableView: tableView, indexPath: indexPath)\n    if let cell = cell as? ParticipantInCallTableViewCell {\n        cell.buttonMoreClick = { [weak self] button in\n            guard let self = self else {return}\n            //createMoreMenu is covered in host control docs\n            self.createMoreMenu(participantListner: cell.model.participantUpdateEventListner, indexPath: indexPath)\n        }\n    } else if let cell = cell as? ParticipantWaitingTableViewCell {\n        cell.buttonCrossClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.waitlistEventListner.rejectWaitingRequest(participant: cell.model.participant)\n        }\n        cell.buttonTickClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.waitlistEventListner.acceptWaitingRequest(participant: cell.model.participant)\n        }\n    } else if let cell = cell as? OnStageWaitingRequestTableViewCell {\n        cell.buttonCrossClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.mobileClient.stage.denyAccess(id: cell.model.participant.id)\n            self.reloadScreen()\n        }\n        cell.buttonTickClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.mobileClient.stage.grantAccess(id: cell.model.participant.id)\n            self.reloadScreen()\n        }\n    } else if let cell = cell as? AcceptButtonTableViewCell {\n        cell.buttonClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.acceptAll()\n            self.reloadScreen()\n        }\n    } else if let cell = cell as? RejectButtonTableViewCell {\n        cell.buttonClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.rejectAll()\n            self.reloadScreen()\n        }\n    }\n    return cell\n}\n"})})]})}function d(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return s},a:function(){return r}});var i=n(67294);let l={},a=i.createContext(l);function r(e){let t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);
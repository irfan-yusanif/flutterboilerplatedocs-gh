"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["48419"],{28147:function(e,t,s){s.r(t),s.d(t,{default:()=>d,frontMatter:()=>c,metadata:()=>n,assets:()=>o,toc:()=>l,contentTitle:()=>r});var n=JSON.parse('{"id":"chat/receiving-chat-messages","title":"Receiving chat messages","description":"Receive chat messages that have been sent in a meeting.","source":"@site/docs/rn-core/chat/receiving-chat-messages.mdx","sourceDirName":"chat","slug":"/chat/receiving-chat-messages","permalink":"/flutterboilerplatedocs/rn-core/chat/receiving-chat-messages","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"rn-core","permalink":"/flutterboilerplatedocs/rn-core/tags/rn-core"},{"inline":true,"label":"chat","permalink":"/flutterboilerplatedocs/rn-core/tags/chat"}],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Receiving chat messages","description":"Receive chat messages that have been sent in a meeting.","sidebar_position":3,"tags":["rn-core","chat"]},"sidebar":"tutorialSidebar","previous":{"title":"Sending a chat message","permalink":"/flutterboilerplatedocs/rn-core/chat/sending-a-chat-message"},"next":{"title":"Editing Chat Messages","permalink":"/flutterboilerplatedocs/rn-core/chat/edit-chat-messages"}}'),a=s("85893"),i=s("50065");let c={title:"Receiving chat messages",description:"Receive chat messages that have been sent in a meeting.",sidebar_position:3,tags:["rn-core","chat"]},r="Receiving chat messages",o={},l=[];function h(e){let t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.a)(),...e.components},{Head:s}=t;return!s&&function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"receiving-chat-messages",children:"Receiving chat messages"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"meeting.chat"})," object emits events when new chat messages are received. You\ncan listen for the ",(0,a.jsx)(t.code,{children:"chatUpdate"})," event to log when a new chat message is\nreceived."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"meeting.chat.on('chatUpdate', ({ message, messages }) => {\n  console.log(`Received message ${message}`);\n  console.log(`All messages in chat: ${messages.join(', ')}`);\n});\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Here, the ",(0,a.jsx)(t.code,{children:"message"})," is of type ",(0,a.jsx)(t.code,{children:"Message"}),", as defined in\n",(0,a.jsx)(t.a,{href:"./introduction",children:"introduction"}),". ",(0,a.jsx)(t.code,{children:"messages"})," is a list of all chat messages in the\nmeeting, which is the same as ",(0,a.jsx)(t.code,{children:"meeting.chat.messages"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["When a chat message is received, the ",(0,a.jsx)(t.code,{children:"meeting.chat.messages"})," list is also\nupdated."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"console.log(JSON.stringify(meeting.chat.messages));\nmeeting.chat.on('chatUpdate', () => {\n  console.log(JSON.stringify(meeting.chat.messages));\n});\n"})}),"\n",(0,a.jsx)(s,{children:(0,a.jsx)("title",{children:"React Native Core Receiving chat messages"})})]})}function d(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},50065:function(e,t,s){s.d(t,{Z:function(){return r},a:function(){return c}});var n=s(67294);let a={},i=n.createContext(a);function c(e){let t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);
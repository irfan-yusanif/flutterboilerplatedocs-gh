"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["49202"],{33660:function(e,t,n){n.r(t),n.d(t,{default:()=>h,frontMatter:()=>r,metadata:()=>s,assets:()=>c,toc:()=>d,contentTitle:()=>o});var s=JSON.parse('{"id":"stage-management/introduction","title":"Introduction","description":"Stage management in Dyte meetings.","source":"@site/docs/android-core/stage-management/1-introduction.mdx","sourceDirName":"stage-management","slug":"/stage-management/introduction","permalink":"/android-core/stage-management/introduction","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"android-core","permalink":"/android-core/tags/android-core"},{"inline":true,"label":"stage","permalink":"/android-core/tags/stage"}],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Introduction","description":"Stage management in Dyte meetings.","sidebar_position":1,"tags":["android-core","stage"]},"sidebar":"tutorialSidebar","previous":{"title":"Recording","permalink":"/android-core/recording"},"next":{"title":"Stage Host Controls","permalink":"/android-core/stage-management/host-controls"}}'),a=n("85893"),i=n("50065");let r={title:"Introduction",description:"Stage management in Dyte meetings.",sidebar_position:1,tags:["android-core","stage"]},o=void 0,c={},d=[{value:"Accessing the Stage APIs",id:"accessing-the-stage-apis",level:3},{value:"Stage Status",id:"stage-status",level:3},{value:"Viewers",id:"viewers",level:3},{value:"Joining the Stage",id:"joining-the-stage",level:3},{value:"Leaving the Stage",id:"leaving-the-stage",level:3},{value:"List of Stage Events",id:"list-of-stage-events",level:3},{value:"Stage Errors",id:"stage-errors",level:3}];function l(e){let t={code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components},{Head:n}=t;return!n&&function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:(0,a.jsx)(t.em,{children:"Below documentation is relevant for Interactive Livestream(LHLS) and Webinar(WebRTC) use cases."})}),"\n",(0,a.jsx)(t.p,{children:"Instead of a traditional publish-subscribe model, where a user can publish their media and others can choose to subscribe, Dyte\ncomes with an optional managed configuration. In this managed configuration, a less privileged user can be configured with a\ndefault behavior to not publish media. The user can then request permission to publish their media, which a privileged user can\nchoose to grant or deny."}),"\n",(0,a.jsx)(t.h3,{id:"accessing-the-stage-apis",children:"Accessing the Stage APIs"}),"\n",(0,a.jsxs)(t.p,{children:["Dyte's stage management APIs allow users to perform actions such as joining and leaving the stage, managing stage requests and\npermissions, and kicking participants from the stage. These APIs are accessible through the ",(0,a.jsx)(t.code,{children:"meeting.stage"})," object."]}),"\n",(0,a.jsx)(t.h3,{id:"stage-status",children:"Stage Status"}),"\n",(0,a.jsxs)(t.p,{children:["In meetings where stage management is enabled, a user's stage status can change within the values represented by the ",(0,a.jsx)(t.code,{children:"StageStatus"}),"\nenum. These status values include:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"ON_STAGE"}),": Indicates that the user is currently on the stage and is allowed to publish media."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"OFF_STAGE"}),": Indicates that the user is a viewer and is not on the stage. They can see and listen to those on stage."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"REQUESTED_TO_JOIN_STAGE"}),": Indicates that the user has a pending request to join the stage. This status is assigned to the user\nuntil the host accepts or rejects their request."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"ACCEPTED_TO_JOIN_STAGE"}),": Indicates that the host has accepted the user's request to join the stage."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"meeting.stage.stageStatus"})," property provides the current stage status of the local user."]}),"\n",(0,a.jsx)(t.h3,{id:"viewers",children:"Viewers"}),"\n",(0,a.jsxs)(t.p,{children:["You can retrieve a list of off-stage participants (viewers) in a stage-enabled meeting by accessing the ",(0,a.jsx)(t.code,{children:"meeting.stage.viewers"}),"\nproperty. This property provides a list of ",(0,a.jsx)(t.code,{children:"DyteRemoteParticipant"})," objects whose stage status is not ",(0,a.jsx)(t.code,{children:"ON_STAGE"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"joining-the-stage",children:"Joining the Stage"}),"\n",(0,a.jsxs)(t.p,{children:["To interact with peers and publish media, users can join the stage. This action is only possible if the user's preset allows them\nto publish media or if their request to join the stage has been accepted by a host (i.e., their stage status is ",(0,a.jsx)(t.code,{children:"ACCEPTED_TO_JOIN_STAGE"}),")."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"meeting.stage.join()\n"})}),"\n",(0,a.jsx)(t.h3,{id:"leaving-the-stage",children:"Leaving the Stage"}),"\n",(0,a.jsx)(t.p,{children:"When users want to stop interacting with peers, they can leave the stage. This action stops their media from being published,\nand their audio and video are no longer received by others in the room."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"meeting.stage.leave()\n"})}),"\n",(0,a.jsx)(t.h3,{id:"list-of-stage-events",children:"List of Stage Events"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"DyteStageEventListener"})," interface provides callback methods for various stage events. Implement these callbacks to handle\nstage-related events in your application:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"meeting.addStageEventListener(object : DyteStageEventListener {\n    override fun onStageAccessRequestAccepted() {\n        // Called when the local user is accepted to join the stage.\n    }\n\n    override fun onStageAccessRequestRejected() {\n        // Called when the local user's request to join the stage is rejected by the host.\n    }\n\n    override fun onRemovedFromStage() {\n        // Called when the local user is removed from the stage.\n    }\n\n    override fun onNewStageAccessRequest(participant: DyteRemoteParticipant) {\n        // Called when a new stage access request is received from a participant.\n        // Triggered only if the local user is a host.\n    }\n\n    override fun onStageAccessRequestsUpdated(accessRequests: List<DyteRemoteParticipant>) {\n        // Called when the list of stage access requests is updated.\n        // Triggered only if the local user is a host.\n    }\n\n    override fun onStageStatusUpdated(oldStatus: StageStatus, newStatus: StageStatus) {}\n        // Called when the local user's stage status is updated.\n    }\n\n    override fun onPeerStageStatusUpdated(\n        participant: DyteRemoteParticipant,\n        oldStatus: StageStatus,\n        newStatus: StageStatus,\n    ) {\n        // Called when a remote participant's stage status is updated.\n    }\n})\n"})}),"\n",(0,a.jsx)(t.h3,{id:"stage-errors",children:"Stage Errors"}),"\n",(0,a.jsxs)(t.p,{children:["All the stage management APIs return a ",(0,a.jsx)(t.code,{children:"StageError"})," if the operation fails. On success, they return ",(0,a.jsx)(t.code,{children:"null"}),". The error type can be one of the following:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"StageDisabledForMeetingType"}),": The meeting type does not support stage management."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"PermissionDenied"}),": The user does not have the required permissions to perform the operation."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"ActionInvalidForStageStatus"}),": The operation is invalid for the current stage status."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"NoRequestToCancel"}),": There is no pending request to cancel."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Next, we'll explore the Stage Management APIs for hosts, allowing them to manage stage requests, participants in Dyte meetings."}),"\n",(0,a.jsx)(n,{children:(0,a.jsx)("title",{children:"Android Core Stage Introduction"})})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return r}});var s=n(67294);let a={},i=s.createContext(a);function r(e){let t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["97142"],{37416:function(t,e,i){i.r(e),i.d(e,{default:()=>d,frontMatter:()=>s,metadata:()=>n,assets:()=>o,toc:()=>l,contentTitle:()=>c});var n=JSON.parse('{"id":"participants/remote-participants","title":"Participant Types","description":"Events, methods and data pertaining to meeting participants.","source":"@site/docs/flutter-core/participants/remote-participants.mdx","sourceDirName":"participants","slug":"/participants/","permalink":"/flutterboilerplatedocs/flutter-core/participants/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"flutter-core","permalink":"/flutterboilerplatedocs/flutter-core/tags/flutter-core"},{"inline":true,"label":"participants","permalink":"/flutterboilerplatedocs/flutter-core/tags/participants"}],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Participant Types","description":"Events, methods and data pertaining to meeting participants.","sidebar_position":1,"slug":"/participants/","tags":["flutter-core","participants"]},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/flutterboilerplatedocs/flutter-core/participants/introduction"},"next":{"title":"Participant Object","permalink":"/flutterboilerplatedocs/flutter-core/participants/participant-object"}}'),r=i("85893"),a=i("50065");let s={title:"Participant Types",description:"Events, methods and data pertaining to meeting participants.",sidebar_position:1,slug:"/participants/",tags:["flutter-core","participants"]},c="Participant Types",o={},l=[];function p(t){let e={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...t.components},{Head:i}=e;return!i&&function(t,e){throw Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"participant-types",children:"Participant Types"})}),"\n",(0,r.jsxs)(e.p,{children:["The data regarding all meeting participants is stored under ",(0,r.jsx)(e.code,{children:"meeting.participants"}),". These ",(0,r.jsx)(e.strong,{children:"does not"})," include the local user. Use the methods and events to consume the participants data. For example, to get all the participants who joined the meeting:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:"// get all joined participants\nfinal List<DyteJoinedMeetingParticipant> joined = dyteMobileClient.participants.active;\n\n// get active participants\nfinal List<DyteJoinedMeetingParticipant> active = dyteMobileClient.participants.active;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"dyteMobileClient.participants"})," object has the following ",(0,r.jsx)(e.strong,{children:"lists"})," of participants"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"joined"}),": A list that contains all the participants who are currently in the meeting\nexcept the local user"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"waitlisted"}),": A list that contains all the participants waiting to join the\nmeeting."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"active"}),": A list that contains all the participants, ",(0,r.jsx)(e.strong,{children:"including"})," the local user whose media is subscribed to i.e participants who are supposed to be on the screen at the moment, including the local user."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"pinned"}),": A list that contains all the pinned participants of the meeting."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"screenShares"}),": A list that contains all the participants who are sharing their screen."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["Therefore if you were to make a video / audio grid of participants, you'd use the ",(0,r.jsx)(e.code,{children:"active"})," list, but to display the list of all participants in the meeting you'd use the ",(0,r.jsx)(e.code,{children:"joined"})," list."]}),"\n",(0,r.jsxs)(e.p,{children:["Each participant in each of the ",(0,r.jsx)(e.code,{children:"joined"}),", ",(0,r.jsx)(e.code,{children:"active"}),", ",(0,r.jsx)(e.code,{children:"pinned"})," and ",(0,r.jsx)(e.code,{children:"screenShares"})," list are of type ",(0,r.jsx)(e.code,{children:"DyteJoinedMeetingParticipant"}),", ",(0,r.jsx)(e.code,{children:"waitlisted"})," list is of type ",(0,r.jsx)(e.code,{children:"DyteWaitlistedParticipant"}),"."]}),"\n",(0,r.jsx)(i,{children:(0,r.jsx)("title",{children:"Flutter Core Participants"})})]})}function d(t={}){let{wrapper:e}={...(0,a.a)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(p,{...t})}):p(t)}},50065:function(t,e,i){i.d(e,{Z:function(){return c},a:function(){return s}});var n=i(67294);let r={},a=n.createContext(r);function s(t){let e=n.useContext(a);return n.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),n.createElement(a.Provider,{value:e},t.children)}}}]);
"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["12464"],{9704:function(e,n,t){t.r(n),t.d(n,{default:()=>h,frontMatter:()=>r,metadata:()=>i,assets:()=>l,toc:()=>d,contentTitle:()=>a});var i=JSON.parse('{"id":"local-user/events","title":"Events","description":"Explore local user events in iOS Core with Dyte Docs. Understand how to leverage these events for enhanced user experiences within your app.","source":"@site/docs/ios-core/local-user/events.mdx","sourceDirName":"local-user","slug":"/local-user/events","permalink":"/ios-core/local-user/events","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"ios-core","permalink":"/ios-core/tags/ios-core"},{"inline":true,"label":"local-user","permalink":"/ios-core/tags/local-user"},{"inline":true,"label":"self","permalink":"/ios-core/tags/self"}],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Events","description":"Explore local user events in iOS Core with Dyte Docs. Understand how to leverage these events for enhanced user experiences within your app.","sidebar_position":2,"tags":["ios-core","local-user","self"]},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/ios-core/Introduction"},"next":{"title":"Introduction","permalink":"/ios-core/local-user/introduction"}}'),s=t("85893"),o=t("50065");let r={title:"Events",description:"Explore local user events in iOS Core with Dyte Docs. Understand how to leverage these events for enhanced user experiences within your app.",sidebar_position:2,tags:["ios-core","local-user","self"]},a="Local User - Events",l={},d=[{value:"Video update",id:"video-update",level:3},{value:"Audio update",id:"audio-update",level:3},{value:"Room disconnected update",id:"room-disconnected-update",level:3},{value:"Proximity changed",id:"proximity-changed",level:3},{value:"Waitlist status",id:"waitlist-status",level:3},{value:"Webinar Request",id:"webinar-request",level:2},{value:"LocalUser removed",id:"localuser-removed",level:2},{value:"Listen to Broadcast message within the room",id:"listen-to-broadcast-message-within-the-room",level:2}];function c(e){let n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.a)(),...e.components},{Head:t}=n;return!t&&function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"local-user---events",children:"Local User - Events"})}),"\n",(0,s.jsxs)(n.p,{children:["You can subscribe to various events on the local user by implementing\n",(0,s.jsx)(n.code,{children:"DyteSelfEventsListener"})," and passing the object to\n",(0,s.jsx)(n.code,{children:"meeting.addSelfEventsListener(dyteSelfEventsListener)"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"video-update",children:"Video update"}),"\n",(0,s.jsxs)(n.p,{children:["Triggered when the user starts / stops the video using ",(0,s.jsx)(n.code,{children:"enableVideo"})," or\n",(0,s.jsx)(n.code,{children:"disableVideo"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onVideoUpdate(videoEnabled: Bool) {\n      if (videoEnabled) {\n        // video is enabled, and other participants in room can see local user\n      } else {\n        // video is disabled, and other participants in room can not see local user.\n      }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"audio-update",children:"Audio update"}),"\n",(0,s.jsxs)(n.p,{children:["Triggered when the user starts / stops the audio using ",(0,s.jsx)(n.code,{children:"enableAudio"})," or\n",(0,s.jsx)(n.code,{children:"disableAudio"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"\nextension MeetingViewModel: DyteSelfEventsListener {\n    func onAudioUpdate(audioEnabled: Bool) {\n      if (audioEnabled) {\n        // audio is enabled, and other participants in room can hear local user\n      } else {\n        // audio is disabled, and other participants in room can not hear local user.\n      }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"room-disconnected-update",children:"Room disconnected update"}),"\n",(0,s.jsx)(n.p,{children:"Triggered when the user is disconnected due to media/network errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onMeetingRoomDisconnected() {\n      //disconnected\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"proximity-changed",children:"Proximity changed"}),"\n",(0,s.jsx)(n.p,{children:"Triggered when there is any change in proximity. Meaning if device is near ear\npiece which triggers display on/off."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onProximityChanged(isNear: Bool) {\n      // isNear\n      // if true, display should be turned off, as user might be speaking through earpiece\n      // if false, display should be turned on, as user might be looking at display and listening through speaker/earphones.\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"waitlist-status",children:"Waitlist status"}),"\n",(0,s.jsx)(n.p,{children:"For meetings whose waiting room is enabled:"}),"\n",(0,s.jsx)(n.p,{children:"To get status of localUser in waiting room we can use"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"let waitListStatus = meeting.localUser.waitListStatus\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Developers can listen to those changes in ",(0,s.jsx)(n.code,{children:"onWaitListStatusUpdate()"})," callbacks"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onWaitListStatusUpdate(waitListStatus: WaitListStatus) {\n\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"webinar-request",children:"Webinar Request"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"onWebinarPresentRequestReceived()"})," callback is triggered when the local user receives a request to join the webinar, while the ",(0,s.jsx)(n.code,{children:"onStoppedPresenting()"})," callback is triggered when the local user ends their presentation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onWebinarPresentRequestReceived() {\n        // Display an alert to the user here, allowing them to accept or reject the request.\n    }\n    func onStoppedPresenting() {\n        //Display an alert to the user indicating that they are no longer presenting.\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"localuser-removed",children:"LocalUser removed"}),"\n",(0,s.jsxs)(n.p,{children:["Whenever local user is removed from the meeting, ",(0,s.jsx)(n.code,{children:"onRemovedFromMeeting()"})," callback is triggered."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onRemovedFromMeeting() {\n      // Display an alert here that user no longer in the meeting.\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"listen-to-broadcast-message-within-the-room",children:"Listen to Broadcast message within the room"}),"\n",(0,s.jsxs)(n.p,{children:["Get broadcast messages within the room using ",(0,s.jsx)(n.code,{children:"onRoomMessage"})," callback."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"type"}),': A client-specific type to differentiate between custom messages like "emoji" or "greetings"']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"payload"}),": A dictionary containing the message payload, where keys are strings and values are of any type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n  func onRoomMessage(type: String, payload: [String : Any]) {\n    // triggered when a message is sent within the room.\n  }\n"})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("title",{children:"iOS Core Events"}),(0,s.jsx)("meta",{name:"description",content:"Explore local user events in iOS Core with Dyte Docs. Understand how to leverage these events for enhanced user experiences within your app."})]})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return r}});var i=t(67294);let s={},o=i.createContext(s);function r(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);
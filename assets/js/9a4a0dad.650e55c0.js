"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["79300"],{6994:function(e,n,t){t.r(n),t.d(n,{default:()=>p,frontMatter:()=>s,metadata:()=>o,assets:()=>a,toc:()=>c,contentTitle:()=>r});var o=JSON.parse('{"id":"polls/introduction","title":"Introduction","description":"Learn the fundamentals of integrating polls into your iOS application with Dyte\'s Polls Introduction guide.","source":"@site/docs/ios-core/polls/introduction.mdx","sourceDirName":"polls","slug":"/polls/introduction","permalink":"/ios-core/polls/introduction","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"ios-core","permalink":"/ios-core/tags/ios-core"},{"inline":true,"label":"polls","permalink":"/ios-core/tags/polls"}],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Introduction","description":"Learn the fundamentals of integrating polls into your iOS application with Dyte\'s Polls Introduction guide.","sidebar_position":1,"tags":["ios-core","polls"]},"sidebar":"tutorialSidebar","previous":{"title":"Livestreaming","permalink":"/ios-core/livestreaming"},"next":{"title":"Creating a poll","permalink":"/ios-core/polls/creating-a-poll"}}'),i=t("85893"),l=t("50065");let s={title:"Introduction",description:"Learn the fundamentals of integrating polls into your iOS application with Dyte's Polls Introduction guide.",sidebar_position:1,tags:["ios-core","polls"]},r="Introduction",a={},c=[{value:"Listening to new polls in a meeting",id:"listening-to-new-polls-in-a-meeting",level:2}];function d(e){let n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,i.jsxs)(n.p,{children:["The meetings polls object can be accessed using ",(0,i.jsx)(n.code,{children:"meeting.polls"}),". It provides\nmethods to create polls, vote, and more."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"meeting.polls.polls"})," returns an array of all polls created in a meeting, where\neach element is an object of type ",(0,i.jsx)(n.code,{children:"DytePollMessage"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"class DytePollMessage{\n  let id: String\n  let question: String\n  let anonymous: Bool\n  let hideVotes: Bool\n  let createdBy: String\n  let options: [DytePollOption]\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"DytePollMessage"})," is the main class for any poll in Dyte. It also\ncontains list of ",(0,i.jsx)(n.code,{children:"DytePollOption"})," which are options for a given poll. And every\n",(0,i.jsx)(n.code,{children:"DytePollOption"})," has list of votes inside of it. Votes are objects of class\n",(0,i.jsx)(n.code,{children:"DytePollVote"})," which internally has id and name of the vote."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"class DytePollOption{\n  let text: String\n  let votes: [DytePollVote]\n  let count: Int\n}\n\nclass DytePollVote{\n  let id: String\n  let name: String\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["One can easily create, vote and view polls by listening to callbacks on\n",(0,i.jsx)(n.code,{children:"meeting"})," object."]}),"\n",(0,i.jsx)(n.h2,{id:"listening-to-new-polls-in-a-meeting",children:"Listening to new polls in a meeting"}),"\n",(0,i.jsxs)(n.p,{children:["To be able to receive new poll messages you need to implement a method\n",(0,i.jsx)(n.code,{children:"onPollUpdates()"})," method from callback ",(0,i.jsx)(n.code,{children:"DyteMeetingRoomEventsListener"}),". You can\nsubscribe to this events by calling\n",(0,i.jsx)(n.code,{children:"meeting.addMeetingEventsListener(meetingViewModel)"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteMeetingRoomEventsListener {\n  func onNewPoll(poll: DytePollMessage) {\n    // code to handle new poll\n  }\n\n  func onPollUpdates(pollMessages: [DytePollMessage]) {\n    // code to handle polls and their vote updates.\n  }\n}\n"})})]})}function p(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return s}});var o=t(67294);let i={},l=o.createContext(i);function s(e){let n=o.useContext(l);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["27185"],{95051:function(e,t,n){n.r(t),n.d(t,{default:()=>h,frontMatter:()=>a,metadata:()=>s,assets:()=>d,toc:()=>c,contentTitle:()=>l});var s=JSON.parse('{"id":"livestreaming","title":"Livestreaming","description":"- Livestreaming is often used for events, such as concerts, conferences, and sports games, as well as for online classes, gaming, and social media platforms.","source":"@site/docs/ios-core/livestreaming.mdx","sourceDirName":".","slug":"/livestreaming","permalink":"/flutterboilerplatedocs/ios-core/livestreaming","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Livestreaming","sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Stage Access for Viewers","permalink":"/flutterboilerplatedocs/ios-core/stage-management/viewer-participants"},"next":{"title":"Introduction","permalink":"/flutterboilerplatedocs/ios-core/polls/introduction"}}'),i=n("85893"),r=n("50065");let a={title:"Livestreaming",sidebar_position:10},l=void 0,d={},c=[{value:"Objects",id:"objects",level:2},{value:"roomName [<em>String</em>]",id:"roomname-string",level:3},{value:"state [<em>LiveStreamState</em>]",id:"state-livestreamstate",level:3},{value:"stage requests [<em><em>List&amp;ltDyteLiveStreamStageRequestPeer&amp;gt</em></em>]",id:"stage-requests-listltdytelivestreamstagerequestpeergt",level:3},{value:"liveStreamUrl [<em>String</em>]",id:"livestreamurl-string",level:3},{value:"<strong>Host Controls Methods</strong>",id:"host-controls-methods",level:2},{value:"Accept request",id:"accept-request",level:3},{value:"Reject request",id:"reject-request",level:3},{value:"Accept all requests",id:"accept-all-requests",level:3},{value:"Reject all requests",id:"reject-all-requests",level:3},{value:"Livestream events",id:"livestream-events",level:2},{value:"onLiveStreamStarting",id:"onlivestreamstarting",level:3},{value:"onLiveStreamStarted",id:"onlivestreamstarted",level:3},{value:"onLiveStreamStateUpdate",id:"onlivestreamstateupdate",level:3},{value:"onViewerCountUpdated",id:"onviewercountupdated",level:3},{value:"onLiveStreamEnding",id:"onlivestreamending",level:3},{value:"onLiveStreamEnded",id:"onlivestreamended",level:3},{value:"onLiveStreamErrored",id:"onlivestreamerrored",level:3},{value:"onStageCountUpdated",id:"onstagecountupdated",level:3},{value:"onStageRequestsUpdated",id:"onstagerequestsupdated",level:3},{value:"onJoinRequestAccepted",id:"onjoinrequestaccepted",level:3},{value:"onJoinRequestRejected",id:"onjoinrequestrejected",level:3}];function o(e){let t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Head:n}=t;return!n&&function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Livestreaming is often used for events, such as concerts, conferences, and sports games, as well as for online classes, gaming, and social media platforms."}),"\n",(0,i.jsx)(t.li,{children:"Dyte uses LHLS to deliver low latency one way streams"}),"\n",(0,i.jsx)(t.li,{children:"The Interactive Livestream product delivers interactivity via chat, polls, reactions etc"}),"\n",(0,i.jsx)(t.li,{children:"Viewer can also be pulled in the livestream by the host using Stage Management APIs"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This topic talks about how you can use livestreaming properties, events, and functions."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"DyteLivestream"})," object obtained by ",(0,i.jsx)(t.code,{children:"meeting.livestream"})," method. The objects and methods it contains are defined below."]}),"\n",(0,i.jsx)(t.h2,{id:"objects",children:"Objects"}),"\n",(0,i.jsxs)(t.h3,{id:"roomname-string",children:["roomName [",(0,i.jsx)(t.em,{children:"String"}),"]"]}),"\n",(0,i.jsxs)(t.p,{children:["The name of the room.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(t.h3,{id:"state-livestreamstate",children:["state [",(0,i.jsx)(t.em,{children:"LiveStreamState"}),"]"]}),"\n",(0,i.jsxs)(t.p,{children:["The current status of the livestream, possible values can be: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"LiveStreamState.NONE"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"LiveStreamState.STARTING"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"LiveStreamState.STARTED"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"LiveStreamState.STOPPING"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"LiveStreamState.STOPPED"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"LiveStreamState.ERRORED"})}),"\n"]}),"\n",(0,i.jsxs)(t.h3,{id:"stage-requests-listltdytelivestreamstagerequestpeergt",children:["stage requests [",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.em,{children:"List&ltDyteLiveStreamStageRequestPeer&gt"})}),"]"]}),"\n",(0,i.jsxs)(t.p,{children:["object accessed via ",(0,i.jsx)(t.code,{children:"meeting.livestream.stageRequestPeers"})," contains the list of requests to join the stage. Each request contains 3 properties:",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"peerId"}),": [",(0,i.jsx)(t.em,{children:"String"}),"] The peerId of the user who requested to join the stage."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"userId"}),": [",(0,i.jsx)(t.em,{children:"String"}),"] The userId of the user who requested to join the stage."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"displayName"}),": [",(0,i.jsx)(t.em,{children:"String"}),"] The display name of the user who requested to join the stage.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(t.h3,{id:"livestreamurl-string",children:["liveStreamUrl [",(0,i.jsx)(t.em,{children:"String"}),"]"]}),"\n",(0,i.jsx)(t.p,{children:"List of URL which can be used to consume livestream."}),"\n",(0,i.jsx)(t.h2,{id:"host-controls-methods",children:(0,i.jsx)(t.strong,{children:"Host Controls Methods"})}),"\n",(0,i.jsx)(t.p,{children:"Dyte's stage management APIs allow hosts to receive and manage stage requests as well as leave and join the stage."}),"\n",(0,i.jsx)(t.h3,{id:"accept-request",children:"Accept request"}),"\n",(0,i.jsxs)(t.p,{children:["This method lets the host accept a request to join the stage. It takes the ",(0,i.jsx)(t.em,{children:"DyteLiveStreamStageRequestPeer.id"})," as an argument whose request has to be accepted."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"meeting.livestream.acceptRequest(peer: peer.id);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"reject-request",children:"Reject request"}),"\n",(0,i.jsxs)(t.p,{children:["This method lets the host reject a request to join the stage. It takes the ",(0,i.jsx)(t.em,{children:"DyteLiveStreamStageRequestPeer.id"})," as an argument whose request has to be rejected."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"meeting.livestream.rejectRequest(peer: peer.id);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"accept-all-requests",children:"Accept all requests"}),"\n",(0,i.jsx)(t.p,{children:"This method lets the host accept all the requests to join the stage."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"meeting.livestream.acceptAll();\n"})}),"\n",(0,i.jsx)(t.h3,{id:"reject-all-requests",children:"Reject all requests"}),"\n",(0,i.jsx)(t.p,{children:"This method lets the host reject all the requests to join the stage."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"meeting.livestream.rejectAll();\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can listen to livestream events by attaching a listener by calling ",(0,i.jsx)(t.code,{children:"addLivestreamEventsListener"})," on ",(0,i.jsx)(t.code,{children:"meeting"})," object where ",(0,i.jsx)(t.code,{children:"meeting"})," is an instance of ",(0,i.jsx)(t.code,{children:"DyteMobileClient()"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"meeting.addLiveStreamEventsListener(liveStreamEventsListener: self)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"extension LivestreamViewController: DyteLiveStreamEventsListener {\n    public func onJoinRequestAccepted(peer: LiveStreamStagePeer) {\n        // when localUser's join request is accepted by host\n    }\n\n    public func onJoinRequestRejected(peer: LiveStreamStagePeer) {\n        // when localUser's join request is rejected by host\n    }\n\n    public func onLiveStreamEnded() {\n        // when livestream is ended\n    }\n\n    public func onLiveStreamEnding() {\n        // when livestream is ending\n    }\n\n    public func onLiveStreamErrored() {\n        // errored livestream\n    }\n\n    public func onLiveStreamStarted() {\n        // when livestream is started\n    }\n\n    public func onLiveStreamStarting() {\n        // when livestream is starting\n    }\n\n    public func onLiveStreamStateUpdate(data: DyteLivestreamData) {\n        // when there is an update in state of the livestream\n    }\n\n    public func onStageCountUpdated(count: Int32) {\n        // when stage count updates in livestream\n    }\n\n    public func onStageRequestsUpdated(requests: [LiveStreamStageRequestPeer]) {\n        // when there are updates in stage requests\n    }\n\n    public func onViewerCountUpdated(count: Int32) {\n        // when viewer count updates in livestream\n    }\n\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"livestream-events",children:"Livestream events"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onlivestreamstarting",children:"onLiveStreamStarting"}),"\n",(0,i.jsx)(t.p,{children:"This event is triggered when the livestream is about to start."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onlivestreamstarted",children:"onLiveStreamStarted"}),"\n",(0,i.jsx)(t.p,{children:"This event is triggered when the livestream has started."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onlivestreamstateupdate",children:"onLiveStreamStateUpdate"}),"\n",(0,i.jsx)(t.p,{children:"This event is triggered when the livestream state is updated."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onviewercountupdated",children:"onViewerCountUpdated"}),"\n",(0,i.jsx)(t.p,{children:"This event is triggered when the viewer count is updated."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onlivestreamending",children:"onLiveStreamEnding"}),"\n",(0,i.jsx)(t.p,{children:"This event is triggered when the livestream is about to end."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onlivestreamended",children:"onLiveStreamEnded"}),"\n",(0,i.jsx)(t.p,{children:"This event is triggered when the livestream has ended."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onlivestreamerrored",children:"onLiveStreamErrored"}),"\n",(0,i.jsx)(t.p,{children:"This event is triggered when their is an error while starting/stopping the livestream."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onstagecountupdated",children:"onStageCountUpdated"}),"\n",(0,i.jsxs)(t.p,{children:["This event is triggered when the number of users on stage is updated. The ",(0,i.jsx)(t.code,{children:"count"})," object contains the updated stage count."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onstagerequestsupdated",children:"onStageRequestsUpdated"}),"\n",(0,i.jsxs)(t.p,{children:["This event is triggered when the stage requests are updated. The ",(0,i.jsx)(t.code,{children:"requests"})," object contains the updated list of stage requests."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onjoinrequestaccepted",children:"onJoinRequestAccepted"}),"\n",(0,i.jsxs)(t.p,{children:["This event is triggered when a stage request is accepted. The ",(0,i.jsx)(t.code,{children:"peer"})," object contains the peer whose request is accepted."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"  public func onJoinRequestAccepted(peer: LiveStreamStagePeer) {}\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"onjoinrequestrejected",children:"onJoinRequestRejected"}),"\n",(0,i.jsxs)(t.p,{children:["This event is triggered when a stage request is rejected. The ",(0,i.jsx)(t.code,{children:"peer"})," object contains the peer whose request is rejected."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"  public func onJoinRequestRejected(peer: LiveStreamStagePeer) {}\n"})}),"\n",(0,i.jsx)(n,{children:(0,i.jsx)("title",{children:"iOS Core Livestreaming"})}),"\n"]}),"\n"]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return l},a:function(){return a}});var s=n(67294);let i={},r=s.createContext(i);function a(e){let t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);
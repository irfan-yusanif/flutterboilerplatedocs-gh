"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["79843"],{19696:function(e,t,n){n.r(t),n.d(t,{default:()=>u,frontMatter:()=>a,metadata:()=>i,assets:()=>l,toc:()=>d,contentTitle:()=>s});var i=JSON.parse('{"id":"pre-call/waiting-room","title":"Waiting Room","description":"When you call meeting.joinRoom(), the user either enters the meeting room directly if allowed, or they are placed in the waiting room","source":"@site/docs/android-core/pre-call/4-waiting-room.mdx","sourceDirName":"pre-call","slug":"/pre-call/waiting-room","permalink":"/flutterboilerplatedocs/android-core/pre-call/waiting-room","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Meeting Metadata","permalink":"/flutterboilerplatedocs/android-core/pre-call/meeting-meta"},"next":{"title":"Introduction","permalink":"/flutterboilerplatedocs/android-core/Introduction"}}'),o=n("85893"),r=n("50065");let a={},s="Waiting Room",l={},d=[{value:"Meeting Room Joined",id:"meeting-room-joined",level:3},{value:"Waitlisted Participant",id:"waitlisted-participant",level:3}];function c(e){let t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components},{TabItem:n,Tabs:i}=t;return!n&&h("TabItem",!0),!i&&h("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"waiting-room",children:"Waiting Room"})}),"\n",(0,o.jsxs)(t.p,{children:["When you call ",(0,o.jsx)(t.code,{children:"meeting.joinRoom()"}),", the user either enters the meeting room directly if allowed, or they are placed in the waiting room\nif they are a waitlisted participant."]}),"\n",(0,o.jsx)(t.p,{children:"The diagram illustrates the possible room states the local user can be in."}),"\n",(0,o.jsx)(t.mermaid,{value:"stateDiagram-v2\n    init --\x3e joined\n    init --\x3e waitlisted\n    waitlisted --\x3e joined\n    waitlisted --\x3e rejected"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(t.h3,{id:"meeting-room-joined",children:"Meeting Room Joined"}),"\n",(0,o.jsxs)(t.p,{children:["If user joins the room successfully, you receive the ",(0,o.jsx)(t.code,{children:"onMeetingRoomJoinCompleted"})," callback in ",(0,o.jsx)(t.code,{children:"DyteMeetingRoomEventsListener"}),".\nYou can listen for this callback as follows:"]}),"\n",(0,o.jsxs)(i,{groupId:"android-core-media-preview",children:[(0,o.jsx)(n,{value:"kotlin",label:"Kotlin",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:"meeting.addMeetingRoomEventsListener(object : DyteMeetingRoomEventsListener {\n    override fun onMeetingRoomJoinCompleted(meeting: DyteMobileClient) {\n        // Local user is in the meeting\n    }\n})\n"})})}),(0,o.jsx)(n,{value:"java",label:"Java",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"meeting.addMeetingRoomEventsListener(new DyteMeetingRoomEventsListener() {\n    @Override\n    public void onMeetingRoomJoinCompleted(DyteMobileClient meeting) {\n        // Local user is in the meeting\n    }\n})\n"})})})]}),"\n",(0,o.jsx)(t.h3,{id:"waitlisted-participant",children:"Waitlisted Participant"}),"\n",(0,o.jsxs)(t.p,{children:["If the user is waitlisted, the ",(0,o.jsx)(t.code,{children:"onWaitListStatusUpdate"})," callback in ",(0,o.jsx)(t.code,{children:"DyteSelfEventsListener"})," notifies you of any changes in the\nuser's waitlist status. You can check the ",(0,o.jsx)(t.code,{children:"waitListStatus"})," to determine their status:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"WAITING"}),": Local user is in the waiting room."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"REJECTED"}),":  Local user's join room request is rejected by the host."]}),"\n"]}),"\n",(0,o.jsxs)(i,{groupId:"android-core-media-preview",children:[(0,o.jsx)(n,{value:"kotlin",label:"Kotlin",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\n    override fun onWaitListStatusUpdate(waitListStatus: WaitListStatus) {\n        when (waitListStatus) {\n            WAITING -> {\n                // Local user is in the waiting room\n            }\n            REJECTED -> {\n                // Local user's join room request was rejected by the host\n            }\n            else -> { }\n        }\n    }\n})\n"})})}),(0,o.jsx)(n,{value:"java",label:"Java",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"meeting.addSelfEventsListener(new DyteSelfEventsListener() {\n    @Override\n    public void onWaitListStatusUpdate(waitListStatus: WaitListStatus) {\n        switch (waitListStatus) {\n            case WAITING:\n                // Local user is in the waiting room\n                break;\n            case REJECTED:\n                // Local user's join room request was rejected by the host\n                break;\n        }\n    }\n});\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Host can use ",(0,o.jsx)(t.a,{href:"/android-core/participants#waiting-room-methods",children:"these methods to accept/reject participants"}),"."]})]})}function u(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}function h(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},50065:function(e,t,n){n.d(t,{Z:function(){return s},a:function(){return a}});var i=n(67294);let o={},r=i.createContext(o);function a(e){let t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);